// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (1ad08365).
//
// c:\users\naigsa\desktop\aot\source\testsemancom\debug\agramtab.tli
//
// Wrapper implementations for Win32 type library ../../bin/agramtab.tlb
// compiler-generated file created 11/28/12 at 21:32:03 - DO NOT EDIT!

#pragma once

//
// interface IGramTab wrapper method implementations
//

inline unsigned char IGramTab::GetPartOfSpeech ( _bstr_t gram_code ) {
    unsigned char _result = 0;
    HRESULT _hr = raw_GetPartOfSpeech(gram_code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline __int64 IGramTab::GetGrammems ( _bstr_t gram_code ) {
    __int64 _result = 0;
    HRESULT _hr = raw_GetGrammems(gram_code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGramTab::GetClauseTypeByName ( _bstr_t bstrTypeName ) {
    long _result = 0;
    HRESULT _hr = raw_GetClauseTypeByName(bstrTypeName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGramTab::GetClauseTypeByNameIfCan ( _bstr_t bstrTypeName, long * lType ) {
    long _result = 0;
    HRESULT _hr = raw_GetClauseTypeByNameIfCan(bstrTypeName, lType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGramTab::GetClauseNameByType ( long type ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetClauseNameByType(type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IGramTab::GetGramCodeByGrammemsAndPartofSpeechIfCan ( unsigned char Pos, __int64 grammems, BSTR * gramcodes ) {
    long _result = 0;
    HRESULT _hr = raw_GetGramCodeByGrammemsAndPartofSpeechIfCan(Pos, grammems, gramcodes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned char IGramTab::GetPartOfSpeechCount ( ) {
    unsigned char _result = 0;
    HRESULT _hr = get_PartOfSpeechCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGramTab::GetGrammemsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_GrammemsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGramTab::GrammemsToStr ( __int64 grammems ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GrammemsToStr(grammems, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGramTab::GetPartOfSpeechStr ( unsigned char PartOfSpeech ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPartOfSpeechStr(PartOfSpeech, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IGramTab::Load ( ) {
    HRESULT _hr = raw_Load();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IGramTab::HaveEqualPartOfSpeech ( _bstr_t gram_code1, _bstr_t gram_code2 ) {
    long _result = 0;
    HRESULT _hr = raw_HaveEqualPartOfSpeech(gram_code1, gram_code2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGramTab::ProcessPOSAndGrammems ( _bstr_t in, unsigned char * PartOfSpeech, __int64 * grammems ) {
    HRESULT _hr = raw_ProcessPOSAndGrammems(in, PartOfSpeech, grammems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IGramTab::GleicheGenderNumberCase ( _bstr_t common_noun_gram_code, _bstr_t noun_gram_code, _bstr_t adj_gram_code ) {
    long _result = 0;
    HRESULT _hr = raw_GleicheGenderNumberCase(common_noun_gram_code, noun_gram_code, adj_gram_code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGramTab::GleicheCaseNumber ( _bstr_t gram_code1, _bstr_t gram_code2 ) {
    long _result = 0;
    HRESULT _hr = raw_GleicheCaseNumber(gram_code1, gram_code2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline __int64 IGramTab::GetAllGrammems ( _bstr_t gram_code ) {
    __int64 _result = 0;
    HRESULT _hr = raw_GetAllGrammems(gram_code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGramTab::GleicheGenderNumber ( _bstr_t gram_code1, _bstr_t gram_code2 ) {
    long _result = 0;
    HRESULT _hr = raw_GleicheGenderNumber(gram_code1, gram_code2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGramTab::FindGrammem ( _bstr_t gram_codes, __int64 grammems ) {
    long _result = 0;
    HRESULT _hr = raw_FindGrammem(gram_codes, grammems, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGramTab::GleicheSubjectPredicate ( _bstr_t gram_code1, _bstr_t gram_code2 ) {
    long _result = 0;
    HRESULT _hr = raw_GleicheSubjectPredicate(gram_code1, gram_code2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IGramTab::ProcessPOSAndGrammemsIfCan ( _bstr_t in, unsigned char * PartOfSpeech, __int64 * grammems ) {
    long _result = 0;
    HRESULT _hr = raw_ProcessPOSAndGrammemsIfCan(in, PartOfSpeech, grammems, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
