// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (363aaa60).
//
// c:\users\naigsa\desktop\aot\source\testsemancom\debug\seman.tli
//
// Wrapper implementations for Win32 type library ../../bin/seman.tlb
// compiler-generated file created 11/28/12 at 21:32:03 - DO NOT EDIT!

#pragma once

//
// interface IComSemWord wrapper method implementations
//

inline _bstr_t IComSemWord::GetWordStr ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WordStr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSemWord::GetLemma ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Lemma(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IComSemWord::GetSyntaxWordNo ( ) {
    long _result = 0;
    HRESULT _hr = get_SyntaxWordNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSemWord::GetPoses ( ) {
    long _result = 0;
    HRESULT _hr = get_Poses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline __int64 IComSemWord::GetGrammems ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_Grammems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IComSemNode wrapper method implementations
//

inline idlDictTypeEnum IComSemNode::GetDictType ( ) {
    idlDictTypeEnum _result;
    HRESULT _hr = get_DictType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned short IComSemNode::GetUnitNo ( ) {
    unsigned short _result = 0;
    HRESULT _hr = get_UnitNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSemNode::GetWordsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_WordsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IComSemWordPtr IComSemNode::GetWords ( long pos ) {
    struct IComSemWord * _result = 0;
    HRESULT _hr = get_Words(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComSemWordPtr(_result, false);
}

inline _bstr_t IComSemNode::GetGramCodes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GramCodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline __int64 IComSemNode::GetGrammems ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_Grammems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSemNode::GetClauseNo ( ) {
    long _result = 0;
    HRESULT _hr = get_ClauseNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSemNode::GetPoses ( ) {
    long _result = 0;
    HRESULT _hr = get_Poses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IComSemNode::GetRelOperatorsCount ( ) {
    int _result = 0;
    HRESULT _hr = get_RelOperatorsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComSemNode::GetRelOperators ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_RelOperators(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSemNode::GetPrep ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prep(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IComSemRelation wrapper method implementations
//

inline long IComSemRelation::GetSourceNodeNo ( ) {
    long _result = 0;
    HRESULT _hr = get_SourceNodeNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IComSemRelation::GetTargetNodeNo ( ) {
    long _result = 0;
    HRESULT _hr = get_TargetNodeNo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IComSemRelation::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IComSemRelation::GetWordRealization ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WordRealization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISemStructure wrapper method implementations
//

inline HRESULT ISemStructure::InitPresemanDicts ( ) {
    HRESULT _hr = raw_InitPresemanDicts();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISemStructure::InitSemanDicts ( ) {
    HRESULT _hr = raw_InitSemanDicts();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISemStructure::GetSyntaxTreeByText ( _bstr_t text, int ClauseVarNo ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSyntaxTreeByText(text, ClauseVarNo, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISemStructure::GetCurrentTime ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISemStructure::PutCurrentTime ( long pVal ) {
    HRESULT _hr = put_CurrentTime(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISemStructure::FindSituations ( _bstr_t text, long UserTreeVariantNo, _bstr_t PO, long PanicTreeVariantCount, long UserClauseVariantsCombinationNo, _bstr_t AllowableLexVars ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FindSituations(text, UserTreeVariantNo, PO, PanicTreeVariantCount, UserClauseVariantsCombinationNo, AllowableLexVars, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISemStructure::TranslateToEnglish ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_TranslateToEnglish(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISemStructure::BuildSentence ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_BuildSentence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISemStructure::GetLastError ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISemStructure::FindSituationsForNextSentence ( ) {
    long _result = 0;
    HRESULT _hr = raw_FindSituationsForNextSentence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISemStructure::InitializeIndices ( ) {
    HRESULT _hr = raw_InitializeIndices();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISemStructure::GetNodesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_NodesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IComSemNodePtr ISemStructure::GetNodes ( long pos ) {
    struct IComSemNode * _result = 0;
    HRESULT _hr = get_Nodes(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComSemNodePtr(_result, false);
}

inline long ISemStructure::GetRelationsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RelationsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IComSemRelationPtr ISemStructure::GetRelations ( long pos ) {
    struct IComSemRelation * _result = 0;
    HRESULT _hr = get_Relations(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComSemRelationPtr(_result, false);
}

inline HRESULT ISemStructure::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISemStructure::GetModuleTimeStatistics ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModuleTimeStatistics(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISemStructure::GetShouldBuildTclGraph ( ) {
    long _result = 0;
    HRESULT _hr = get_ShouldBuildTclGraph(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISemStructure::PutShouldBuildTclGraph ( long pVal ) {
    HRESULT _hr = put_ShouldBuildTclGraph(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISemStructure::GetSilentMode ( ) {
    long _result = 0;
    HRESULT _hr = get_SilentMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISemStructure::PutSilentMode ( long pVal ) {
    HRESULT _hr = put_SilentMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISemStructure::SyntRusSentence ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SyntRusSentence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISemStructure::SetLemmasToReplace ( _bstr_t LemmasToReplace ) {
    HRESULT _hr = raw_SetLemmasToReplace(LemmasToReplace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISemStructure::SaveThisSentence ( ) {
    HRESULT _hr = raw_SaveThisSentence();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISemStructure::ClearSavedSentences ( ) {
    HRESULT _hr = raw_ClearSavedSentences();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISemStructure::Answer ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Answer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISemStructure::GetDopRelationsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DopRelationsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IComSemRelationPtr ISemStructure::GetDopRelations ( long pos ) {
    struct IComSemRelation * _result = 0;
    HRESULT _hr = get_DopRelations(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IComSemRelationPtr(_result, false);
}
