// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (1ad08365).
//
// c:\users\naigsa\desktop\aot\source\testsemancom\debug\agramtab.tlh
//
// C++ source equivalent of Win32 type library ../../bin/agramtab.tlb
// compiler-generated file created 11/28/12 at 21:32:03 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AGRAMTABLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("ecd62f71-19b6-11d3-a77a-2679a7000000"))
/* LIBID */ __AGRAMTABLib;
enum rPartOfSpeeches;
enum rGrammems;
enum __MIDL___MIDL_itf_agramtab_0000_0001_0001;
enum gPartOfSpeeches;
enum gGrammems;
enum __MIDL___MIDL_itf_agramtab_0000_0001_0002;
enum ePartOfSpeeches;
enum eGrammems;
struct /* coclass */ RusGramTab;
struct __declspec(uuid("ecd62f7d-19b6-11d3-a77a-2679a7000000"))
/* dual interface */ IGramTab;
struct /* coclass */ EngGramTab;
struct /* coclass */ GerGramTab;
typedef enum __MIDL___MIDL_itf_agramtab_0000_0001_0001 rClauseTypeEnum;
typedef enum __MIDL___MIDL_itf_agramtab_0000_0001_0002 gClauseTypeEnum;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IGramTab, __uuidof(IGramTab));

//
// Type library items
//

enum rPartOfSpeeches
{
    NOUN = 0,
    ADJ_FULL = 1,
    VERB = 2,
    PRONOUN = 3,
    PRONOUN_P = 4,
    PRONOUN_PREDK = 5,
    NUMERAL = 6,
    NUMERAL_P = 7,
    ADV = 8,
    PREDK = 9,
    PREP = 10,
    POSL = 11,
    CONJ = 12,
    INTERJ = 13,
    INP = 14,
    PHRASE = 15,
    PARTICLE = 16,
    ADJ_SHORT = 17,
    PARTICIPLE = 18,
    ADVERB_PARTICIPLE = 19,
    PARTICIPLE_SHORT = 20,
    INFINITIVE = 21
};

enum rGrammems
{
    rPlural = 0,
    rSingular = 1,
    rAllNumbers = 3,
    rNominativ = 2,
    rGenitiv = 3,
    rDativ = 4,
    rAccusativ = 5,
    rInstrumentalis = 6,
    rLocativ = 7,
    rVocativ = 8,
    rAllCases = 508,
    rMasculinum = 9,
    rFeminum = 10,
    rNeutrum = 11,
    rMascFem = 12,
    rAllGenders = 3584,
    rPresentTense = 13,
    rFutureTense = 14,
    rPastTense = 15,
    rAllTimes = 57344,
    rFirstPerson = 16,
    rSecondPerson = 17,
    rThirdPerson = 18,
    rAllPersons = 458752,
    rImperative = 19,
    rAnimative = 20,
    rNonAnimative = 21,
    rAllAnimative = 3145728,
    rComparative = 22,
    rPerfective = 23,
    rNonPerfective = 24,
    rNonTransitive = 25,
    rTransitive = 26,
    rActiveVoice = 27,
    rPassiveVoice = 28,
    rIndeclinable = 29,
    rInitialism = 30,
    rPatronymic = 31,
    rToponym = 32,
    rOrganisation = 33,
    rQualitative = 34,
    rDeFactoSingTantum = 35,
    rInterrogative = 36,
    rDemonstrative = 37,
    rName = 38,
    rSurName = 39,
    rImpersonal = 40,
    rSlang = 41,
    rMisprint = 42,
    rColloquial = 43,
    rPossessive = 44,
    rArchaism = 45,
    rSecondCase = 46,
    rPoetry = 47,
    rProfession = 48,
    rSuperlative = 49,
    rPositive = 50
};

enum __MIDL___MIDL_itf_agramtab_0000_0001_0001
{
    VERB_PERS_T = 0,
    ADVERB_PARTICIPLE_T = 1,
    PARTICIPLE_SHORT_T = 2,
    ADJ_SHORT_T = 3,
    PREDK_T = 4,
    PARTICIPLE_T = 5,
    INFINITIVE_T = 6,
    INP_T = 7,
    DASH_T = 8,
    UNDETACHED_ADJ_PATIC = 9,
    COMPARATIVE_T = 10,
    COPUL_T = 11
};

enum gPartOfSpeeches
{
    gART = 0,
    gADJ = 1,
    gADV = 2,
    gEIG = 3,
    gSUB = 4,
    gVER = 5,
    gPA1 = 6,
    gPA2 = 7,
    gPRONOMEN = 8,
    gPRP = 9,
    gKON = 10,
    gNEG = 11,
    gINJ = 12,
    gZAL = 13,
    gZUS = 14,
    gPRO_BEG = 15,
    gZU_INFINITIV = 16
};

enum gGrammems
{
    gNoaUnk = 0,
    gPredikBenutz = 1,
    gProUnk = 2,
    gTmpUnk = 3,
    gNac = 4,
    gMou = 5,
    gCou = 6,
    gGeo = 7,
    gWasser = 8,
    gGeb = 9,
    gStd = 10,
    gLok = 11,
    gVor = 12,
    gSichAcc = 13,
    gSichDat = 14,
    gSchwach = 15,
    gNichtSchwach = 16,
    gModal = 17,
    gAuxiliar = 18,
    gKonj1 = 19,
    gKonj2 = 20,
    gPartizip1 = 21,
    gPartizip2 = 22,
    gZuVerbForm = 23,
    gImperativ = 24,
    gPraeteritum = 25,
    gPrasens = 26,
    gGrundform = 27,
    gKomparativ = 28,
    gSuperlativ = 29,
    gProportionalKonjunktion = 30,
    gInfinitiv = 31,
    gVergleichsKonjunktion = 32,
    gNebenordnende = 33,
    gUnterordnende = 34,
    gPersonal = 35,
    gDemonstrativ = 36,
    gInterrogativ = 37,
    gPossessiv = 38,
    gReflexiv = 39,
    gRinPronomen = 40,
    gAlgPronomen = 41,
    gAdjektiveOhneArtikel = 42,
    gAdjektiveMitUnbestimmte = 43,
    gAdjektiveMitBestimmte = 44,
    gErstePerson = 45,
    gZweitePerson = 46,
    gDrittePerson = 47,
    gFeminin = 48,
    gMaskulin = 49,
    gNeutrum = 50,
    gPlural = 51,
    gSingular = 52,
    gNominativ = 53,
    gGenitiv = 54,
    gDativ = 55,
    gAkkusativ = 56,
    gAbbreviation = 57,
    gEinwohner = 58,
    gTransitiv = 59,
    gIntransitiv = 60,
    gImpersonal = 61
};

enum __MIDL___MIDL_itf_agramtab_0000_0001_0002
{
    VERBSATZ_T = 0,
    PARTIZIPIALSATZ_T = 1,
    INFINITIVSATZ_T = 2
};

enum ePartOfSpeeches
{
    eNOUN = 0,
    eADJ = 1,
    eVERB = 2,
    eVBE = 3,
    eMOD = 4,
    eNUMERAL = 5,
    eCONJ = 6,
    eINTERJ = 7,
    ePREP = 8,
    ePARTICLE = 9,
    eART = 10,
    eADV = 11,
    ePN = 12,
    eORDNUM = 13,
    ePRON = 14,
    ePOSS = 15,
    ePN_ADJ = 16
};

enum eGrammems
{
    eSingular = 0,
    ePlural = 1,
    eMasculinum = 2,
    eFeminum = 3,
    eAnimative = 4,
    ePerfective = 5,
    eNominative = 6,
    eObjectCase = 7,
    eNarrative = 8,
    eGeographics = 9,
    eProper = 10,
    ePersonalPronoun = 11,
    ePossessive = 12,
    ePredicative = 13,
    eUncountable = 14,
    eReflexivePronoun = 15,
    eDemonstrativePronoun = 16,
    eMass = 17,
    eComparativ = 18,
    eSupremum = 19,
    eFirstPerson = 20,
    eSecondPerson = 21,
    eThirdPerson = 22,
    ePresentIndef = 23,
    eInfinitive = 24,
    ePastIndef = 25,
    ePastParticiple = 26,
    eGerund = 27,
    eFuturum = 28,
    eConditional = 29,
    eApostropheS = 30,
    eApostrophe = 31,
    eNames = 32,
    eOrganisation = 33
};

struct __declspec(uuid("ecd62f7e-19b6-11d3-a77a-2679a7000000"))
RusGramTab;
    // [ default ] interface IGramTab

struct __declspec(uuid("ecd62f7d-19b6-11d3-a77a-2679a7000000"))
IGramTab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPartOfSpeechCount))
    unsigned char PartOfSpeechCount;
    __declspec(property(get=GetGrammemsCount))
    long GrammemsCount;

    //
    // Wrapper methods for error-handling
    //

    unsigned char GetPartOfSpeech (
        _bstr_t gram_code );
    __int64 GetGrammems (
        _bstr_t gram_code );
    long GetClauseTypeByName (
        _bstr_t bstrTypeName );
    long GetClauseTypeByNameIfCan (
        _bstr_t bstrTypeName,
        long * lType );
    _bstr_t GetClauseNameByType (
        long type );
    long GetGramCodeByGrammemsAndPartofSpeechIfCan (
        unsigned char Pos,
        __int64 grammems,
        BSTR * gramcodes );
    unsigned char GetPartOfSpeechCount ( );
    long GetGrammemsCount ( );
    _bstr_t GrammemsToStr (
        __int64 grammems );
    _bstr_t GetPartOfSpeechStr (
        unsigned char PartOfSpeech );
    HRESULT Load ( );
    long HaveEqualPartOfSpeech (
        _bstr_t gram_code1,
        _bstr_t gram_code2 );
    HRESULT ProcessPOSAndGrammems (
        _bstr_t in,
        unsigned char * PartOfSpeech,
        __int64 * grammems );
    long GleicheGenderNumberCase (
        _bstr_t common_noun_gram_code,
        _bstr_t noun_gram_code,
        _bstr_t adj_gram_code );
    long GleicheCaseNumber (
        _bstr_t gram_code1,
        _bstr_t gram_code2 );
    __int64 GetAllGrammems (
        _bstr_t gram_code );
    long GleicheGenderNumber (
        _bstr_t gram_code1,
        _bstr_t gram_code2 );
    long FindGrammem (
        _bstr_t gram_codes,
        __int64 grammems );
    long GleicheSubjectPredicate (
        _bstr_t gram_code1,
        _bstr_t gram_code2 );
    long ProcessPOSAndGrammemsIfCan (
        _bstr_t in,
        unsigned char * PartOfSpeech,
        __int64 * grammems );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPartOfSpeech (
        /*[in]*/ BSTR gram_code,
        /*[out,retval]*/ unsigned char * result ) = 0;
      virtual HRESULT __stdcall raw_GetGrammems (
        /*[in]*/ BSTR gram_code,
        /*[out,retval]*/ __int64 * result ) = 0;
      virtual HRESULT __stdcall raw_GetClauseTypeByName (
        /*[in]*/ BSTR bstrTypeName,
        /*[out,retval]*/ long * lType ) = 0;
      virtual HRESULT __stdcall raw_GetClauseTypeByNameIfCan (
        /*[in]*/ BSTR bstrTypeName,
        /*[out]*/ long * lType,
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_GetClauseNameByType (
        /*[in]*/ long type,
        /*[out,retval]*/ BSTR * name ) = 0;
      virtual HRESULT __stdcall raw_GetGramCodeByGrammemsAndPartofSpeechIfCan (
        /*[in]*/ unsigned char Pos,
        /*[in]*/ __int64 grammems,
        /*[out]*/ BSTR * gramcodes,
        /*[out,retval]*/ long * bRes ) = 0;
      virtual HRESULT __stdcall get_PartOfSpeechCount (
        /*[out,retval]*/ unsigned char * pVal ) = 0;
      virtual HRESULT __stdcall get_GrammemsCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GrammemsToStr (
        /*[in]*/ __int64 grammems,
        /*[out,retval]*/ BSTR * result ) = 0;
      virtual HRESULT __stdcall raw_GetPartOfSpeechStr (
        /*[in]*/ unsigned char PartOfSpeech,
        /*[out,retval]*/ BSTR * result ) = 0;
      virtual HRESULT __stdcall raw_Load ( ) = 0;
      virtual HRESULT __stdcall raw_HaveEqualPartOfSpeech (
        /*[in]*/ BSTR gram_code1,
        /*[in]*/ BSTR gram_code2,
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_ProcessPOSAndGrammems (
        /*[in]*/ BSTR in,
        /*[out]*/ unsigned char * PartOfSpeech,
        /*[out]*/ __int64 * grammems ) = 0;
      virtual HRESULT __stdcall raw_GleicheGenderNumberCase (
        /*[in]*/ BSTR common_noun_gram_code,
        /*[in]*/ BSTR noun_gram_code,
        /*[in]*/ BSTR adj_gram_code,
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_GleicheCaseNumber (
        /*[in]*/ BSTR gram_code1,
        /*[in]*/ BSTR gram_code2,
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_GetAllGrammems (
        /*[in]*/ BSTR gram_code,
        /*[out,retval]*/ __int64 * result ) = 0;
      virtual HRESULT __stdcall raw_GleicheGenderNumber (
        /*[in]*/ BSTR gram_code1,
        /*[in]*/ BSTR gram_code2,
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_FindGrammem (
        /*[in]*/ BSTR gram_codes,
        /*[in]*/ __int64 grammems,
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall raw_GleicheSubjectPredicate (
        /*[in]*/ BSTR gram_code1,
        /*[in]*/ BSTR gram_code2,
        /*[out,retval]*/ long * bRes ) = 0;
      virtual HRESULT __stdcall raw_ProcessPOSAndGrammemsIfCan (
        /*[in]*/ BSTR in,
        /*[out]*/ unsigned char * PartOfSpeech,
        /*[out]*/ __int64 * grammems,
        /*[out,retval]*/ long * result ) = 0;
};

struct __declspec(uuid("3b09aa0a-27a7-11d3-a791-bcd3b4000000"))
EngGramTab;
    // [ default ] interface IGramTab

struct __declspec(uuid("2b33f700-3899-4fb3-9ef6-c714926bc700"))
GerGramTab;
    // [ default ] interface IGramTab

//
// Wrapper method implementations
//

#include "c:\users\naigsa\desktop\aot\source\testsemancom\debug\agramtab.tli"

} // namespace AGRAMTABLib

#pragma pack(pop)
